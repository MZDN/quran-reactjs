[{"/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/reportWebVitals.js":"1","/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/components/App.js":"2","/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/index.js":"3","/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/components/Header.js":"4","/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/components/Footer.js":"5","/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/components/ApiClient.js":"6","/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/components/SurahCard.js":"7","/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/components/Pagination.js":"8","/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/components/history.js":"9","/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/components/routes/Route.js":"10","/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/components/routes/index.js":"11","/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/components/SurahList.js":"12","/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/components/page/SurahPage.js":"13","/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/components/page/QuranSlider.js":"14"},{"size":362,"mtime":1606398499000,"results":"15","hashOfConfig":"16"},{"size":254,"mtime":1607116213000,"results":"17","hashOfConfig":"16"},{"size":712,"mtime":1607264352000,"results":"18","hashOfConfig":"16"},{"size":735,"mtime":1609617255000,"results":"19","hashOfConfig":"16"},{"size":610,"mtime":1609621205000,"results":"20","hashOfConfig":"16"},{"size":149,"mtime":1607329947000,"results":"21","hashOfConfig":"16"},{"size":4256,"mtime":1609621120000,"results":"22","hashOfConfig":"16"},{"size":5723,"mtime":1606573326000,"results":"23","hashOfConfig":"16"},{"size":111,"mtime":1607091013000,"results":"24","hashOfConfig":"16"},{"size":969,"mtime":1607092413000,"results":"25","hashOfConfig":"16"},{"size":885,"mtime":1607171478000,"results":"26","hashOfConfig":"16"},{"size":3129,"mtime":1607330196000,"results":"27","hashOfConfig":"16"},{"size":3112,"mtime":1607367927000,"results":"28","hashOfConfig":"16"},{"size":2559,"mtime":1609620946000,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1hdgayz",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},"/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/reportWebVitals.js",[],["64","65"],"/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/components/App.js",[],["66","67"],"/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/index.js",[],["68","69"],"/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/components/Header.js",[],"/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/components/Footer.js",[],"/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/components/ApiClient.js",[],"/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/components/SurahCard.js",["70"],"/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/components/Pagination.js",["71","72","73"],"//https://raw.githubusercontent.com/do-community/build-react-pagination-demo/master/src/components/Pagination.js\n\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\n\nconst LEFT_PAGE = 'LEFT';\nconst RIGHT_PAGE = 'RIGHT';\n\n/**\n * Helper method for creating a range of numbers\n * range(1, 5) => [1, 2, 3, 4, 5]\n */\nconst range = (from, to, step = 1) => {\n  let i = from;\n  const range = [];\n\n  while (i <= to) {\n    range.push(i);\n    i += step;\n  }\n\n  return range;\n}\n\nclass Pagination extends Component {\n\n  constructor(props) {\n    super(props);\n    const { totalRecords = null, pageLimit = 30, pageNeighbours = 0 } = props;\n\n    this.pageLimit = typeof pageLimit === 'number' ? pageLimit : 30;\n    this.totalRecords = typeof totalRecords === 'number' ? totalRecords : 0;\n\n    // pageNeighbours can be: 0, 1 or 2\n    this.pageNeighbours = typeof pageNeighbours === 'number'\n      ? Math.max(0, Math.min(pageNeighbours, 2))\n      : 0;\n\n    this.totalPages = Math.ceil(this.totalRecords / this.pageLimit);\n\n    this.state = { currentPage: 1 };\n  }\n\n  componentDidMount() {\n    this.gotoPage(1);\n  }\n\n  gotoPage = page => {\n    const { onPageChanged = f => f } = this.props;\n\n    const currentPage = Math.max(0, Math.min(page, this.totalPages));\n\n    const paginationData = {\n      currentPage,\n      totalPages: this.totalPages,\n      pageLimit: this.pageLimit,\n      totalRecords: this.totalRecords\n    };\n\n    this.setState({ currentPage }, () => onPageChanged(paginationData));\n  }\n\n  handleClick = page => evt => {\n    evt.preventDefault();\n    this.gotoPage(page);\n  }\n\n  handleMoveLeft = evt => {\n    evt.preventDefault();\n    this.gotoPage(this.state.currentPage - (this.pageNeighbours * 2) - 1);\n  }\n\n  handleMoveRight = evt => {\n    evt.preventDefault();\n    this.gotoPage(this.state.currentPage + (this.pageNeighbours * 2) + 1);\n  }\n\n  /**\n   * Let's say we have 10 pages and we set pageNeighbours to 2\n   * Given that the current page is 6\n   * The pagination control will look like the following:\n   *\n   * (1) < {4 5} [6] {7 8} > (10)\n   *\n   * (x) => terminal pages: first and last page(always visible)\n   * [x] => represents current page\n   * {...x} => represents page neighbours\n   */\n  fetchPageNumbers = () => {\n\n    const totalPages = this.totalPages;\n    const currentPage = this.state.currentPage;\n    const pageNeighbours = this.pageNeighbours;\n\n    /**\n     * totalNumbers: the total page numbers to show on the control\n     * totalBlocks: totalNumbers + 2 to cover for the left(<) and right(>) controls\n     */\n    const totalNumbers = (this.pageNeighbours * 2) + 3;\n    const totalBlocks = totalNumbers + 2;\n\n    if (totalPages > totalBlocks) {\n\n      const startPage = Math.max(2, currentPage - pageNeighbours);\n      const endPage = Math.min(totalPages - 1, currentPage + pageNeighbours);\n\n      let pages = range(startPage, endPage);\n\n      /**\n       * hasLeftSpill: has hidden pages to the left\n       * hasRightSpill: has hidden pages to the right\n       * spillOffset: number of hidden pages either to the left or to the right\n       */\n      const hasLeftSpill = startPage > 2;\n      const hasRightSpill = (totalPages - endPage) > 1;\n      const spillOffset = totalNumbers - (pages.length + 1);\n\n      switch (true) {\n        // handle: (1) < {5 6} [7] {8 9} (10)\n        case (hasLeftSpill && !hasRightSpill): {\n          const extraPages = range(startPage - spillOffset, startPage - 1);\n          pages = [LEFT_PAGE, ...extraPages, ...pages];\n          break;\n        }\n\n        // handle: (1) {2 3} [4] {5 6} > (10)\n        case (!hasLeftSpill && hasRightSpill): {\n          const extraPages = range(endPage + 1, endPage + spillOffset);\n          pages = [...pages, ...extraPages, RIGHT_PAGE];\n          break;\n        }\n\n        // handle: (1) < {4 5} [6] {7 8} > (10)\n        case (hasLeftSpill && hasRightSpill):\n        default: {\n          pages = [LEFT_PAGE, ...pages, RIGHT_PAGE];\n          break;\n        }\n      }\n\n      return [1, ...pages, totalPages];\n\n    }\n\n    return range(1, totalPages);\n\n  }\n\n  render() {\n\n    if (!this.totalRecords || this.totalPages === 1) return null;\n\n    const { currentPage } = this.state;\n    const pages = this.fetchPageNumbers();\n\n    return (\n      <Fragment>\n        <nav aria-label=\"Quran Pagination\">\n          <ul className=\"pagination\">\n            { pages.map((page, index) => {\n\n              if (page === LEFT_PAGE) return (\n                <li key={index} className=\"page-item\">\n                  <a className=\"page-link\" href=\"#\" aria-label=\"Previous\" onClick={this.handleMoveLeft}>\n                    <span aria-hidden=\"true\">&laquo;</span>\n                    <span className=\"sr-only\">Previous</span>\n                  </a>\n                </li>\n              );\n\n              if (page === RIGHT_PAGE) return (\n                <li key={index} className=\"page-item\">\n                  <a className=\"page-link\" href=\"#\" aria-label=\"Next\" onClick={this.handleMoveRight}>\n                    <span aria-hidden=\"true\">&raquo;</span>\n                    <span className=\"sr-only\">Next</span>\n                  </a>\n                </li>\n              );\n\n              return (\n                <li key={index} className={`page-item${ currentPage === page ? ' active' : ''}`}>\n                  <a className=\"page-link\" href=\"#\" onClick={ this.handleClick(page) }>{ page }</a>\n                </li>\n              );\n\n            }) }\n\n          </ul>\n        </nav>\n      </Fragment>\n    );\n\n  }\n}\n\nPagination.propTypes = {\n  totalRecords: PropTypes.number.isRequired,\n  pageLimit: PropTypes.number,\n  pageNeighbours: PropTypes.number,\n  onPageChanged: PropTypes.func\n};\n\nexport default Pagination;",["74","75"],"/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/components/history.js",[],"/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/components/routes/Route.js",[],"/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/components/routes/index.js",[],"/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/components/SurahList.js",[],"/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/components/page/SurahPage.js",[],"/Users/moctarz/Desktop/devs/QURAN/guerrou.net-reactjs/quran-reactjs/src/components/page/QuranSlider.js",["76","77","78"],"import React, { Component } from \"react\";\nimport Slider from \"react-slick\";\n\n\nconst cssstyle = `\n.container {\n    margin: 0 auto;\n    padding: 0px 40px 40px 40px;\n    width: 750px;\n}\n.content {\n    object-fit: cover;\n    width: 100%;\n    max-height: 100%;\n    height: calc(100% - 30px);\n}\nh3 {\n    background: #5f9ea0;\n    color: #fff;\n    font-size: 36px;\n    line-height: 100px;\n    margin: 10px;\n    padding: 2%;\n    position: relative;\n    text-align: center;\n}\n.slick-next:before, .slick-prev:before {\n    color: #000;\n}\n`\n\nexport default class QuranSlider extends Component {\n\n    range(start, stop) {\n        var array = [];\n        var length = stop - start;\n        for (var i = 0; i <= length; i++) { \n            array[i] = start;\n            start++;\n        }\n        return array;\n    }\n    render() {\n        const settings = {\n            initialSlide: 0,\n            dots: false,\n            infinite: false,\n            autoplay: false,\n            speed: 500,\n            arrows: true,\n            slidesToShow:2,\n            rtl:true,\n        \n            \n        };\n        console.log(this.props.pageStart);\n        console.log(this.props.pageEnd);\n        const myArray=this.range(this.props.pageStart,this.props.pageEnd);\n        return (\n            \n            <div>\n                <style>{cssstyle}</style>\n                {/*<h2> Surah Slider</h2>*/}\n                \n                <Slider {...settings} ref={slider=>(this.slider = slider)}>\n                 \n                    {[...Array.from(myArray)].map((_, i) => {\n                        {console.log(myArray[i])}\n                        if(myArray[i] !== 0){\n                        let path = \"https://raw.githubusercontent.com/quran/quran-ios/master/Quran/Resources/images/images_1280/width_1280/page\" + myArray[i].toString().padStart(3, '0') + \".png\";\n                        //console.log(myArray[i]);\n                        /*return (<div className=\"content\">\n                            <img id=\"thumbnail-image\" src={path} className=\"img-fluid\"  alt=\"thumbnail\" />\n                        </div>);*/\n                        return (<div className=\"content\" key={myArray[i]}>\n                        <p className=\"text-center\">{\"Surah:\"+this.props.surahData['name_arabic']+\" \"+this.props.surahData['name_complex']+\" p.\"+myArray[i]}</p>\n                        <img className=\"img-fluid\" src={path} />  \n                      </div>);\n                        }\n                    })}\n                </Slider>\n            </div>\n            \n        );\n    }\n}",{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"79","replacedBy":"83"},{"ruleId":"81","replacedBy":"84"},{"ruleId":"79","replacedBy":"85"},{"ruleId":"81","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":24,"column":19,"nodeType":"89","messageId":"90","endLine":24,"endColumn":35},{"ruleId":"91","severity":1,"message":"92","line":164,"column":19,"nodeType":"93","endLine":164,"endColumn":105},{"ruleId":"91","severity":1,"message":"92","line":173,"column":19,"nodeType":"93","endLine":173,"endColumn":102},{"ruleId":"91","severity":1,"message":"92","line":182,"column":19,"nodeType":"93","endLine":182,"endColumn":88},{"ruleId":"79","replacedBy":"94"},{"ruleId":"81","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":67,"column":58,"nodeType":"98","messageId":"99","endLine":67,"endColumn":60},{"ruleId":"100","severity":1,"message":"101","line":68,"column":25,"nodeType":"102","messageId":"103","endLine":68,"endColumn":50},{"ruleId":"104","severity":1,"message":"105","line":77,"column":25,"nodeType":"93","endLine":77,"endColumn":65},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],["106"],["107"],["106"],["107"],"no-unused-vars","'revelation_order' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["106"],["107"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]